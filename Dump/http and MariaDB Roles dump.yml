

[devops@bastion ansible_implementation]$ mkdir roles/
[devops@bastion ansible_implementation]$ ansible-galaxy init roles/app-tier
[devops@bastion ansible_implementation]$ cat << EOF > roles/app-tier/tasks/main.yml
---
# tasks file for roles/app-tier
# Installation of packages based on inventory groupss
- name: Install Firewalld
  yum:
   name: firewalld
   state: latest

- name: Start firewalld service
  service:
   name: firewalld
   state: started
   enabled: true

- name: Install httpd
  yum:
   name: "{{ item }}"
   state: latest
  with_items:
   - "{{ httpd_pkg }}"

- name: Start httpd
  service:
   name: "{{ httpd_srv }}"
   enabled: true
   state: started


- name: Copy vhost template file
  template:
   src: vhost.conf.j2
   dest: /etc/httpd/conf.d/vhost.conf
  notify:
   - restart_httpd

- name: Create Document Root
  file:
   path: /var/www/vhost/
   state: directory

- name: Copy index.j2 file
  template:
   src: index.j2
   dest: /var/www/vhost/index.php
   mode: 0644
   owner: apache
   group: apache

- name: Open httpd port
  firewalld:
   service: http
   state: enabled
   immediate: true
   permanent: true

- name: enable selinux boolean
  seboolean:
   name: "{{ item }}"
   state: yes
   persistent: yes
  loop:
   - httpd_can_network_connect_db
   - httpd_can_network_connect

EOF

[devops@bastion ansible_implementation]$ cat << EOF > roles/app-tier/handlers/main.yml
---
# handlers file for roles/app-tier

- name: restart_httpd
  service:
   name: "{{ httpd_srv }}"
   state: restarted

EOF

[devops@bastion ansible_implementation]$ cat << EOF > roles/app-tier/vars/main.yml
---
# vars file for roles/app-tier

db:
 user: root
 database: userdb
 password: redhat
httpd_pkg:
 - httpd
 - php
 - php-mysql
httpd_srv: httpd
db_srv: mariadb
EOF

[devops@bastion ansible_implementation]$ cp ~/roles-setup-files/index.j2 roles/app-tier/templates/
[devops@bastion ansible_implementation]$ cp ~/roles-setup-files/vhost.conf.j2 roles/app-tier/templates/



[devops@bastion ansible_implementation]$ ansible-galaxy init roles/db-tier
[devops@bastion ansible_implementation]$ cp ~/roles-setup-files/userdb.backup roles/db-tier/files/
[devops@bastion ansible_implementation]$ cat << EOF > roles/db-tier/tasks/main.yml
---
# tasks file for roles/db-tier
- name: Install mysql
  yum:
   name: "{{ item  }}"
   state: latest
  loop:
   - "{{ db_pkg }}"

- name: Start mysql
  service:
   name: "{{ db_srv }}"
   enabled: true
   state: started

- name: Start firewalld
  service:
   name: firewalld
   state: started
   enabled: true

- name: Open mysql port
  firewalld:
   service: mysql
   state: enabled
   immediate: true
   permanent: true

- name: Check if root password is set
  shell: >
    mysqladmin -u root status
  changed_when: false
  failed_when: false
  register: root_pwd_check


- name: Setting up mariadb password
  mysql_user:
   name: "{{ db['user'] }}"
   password: "{{ db['password'] }}"
  when: root_pwd_check.rc == 0

- name: DB users have privileges on all databases
  mysql_user:
   name: "{{ db['user']}}"
   priv: "*.*:ALL"
   append_privs: yes
   password: "{{ db['password']}}"
   login_password: "{{ db['password']}}"
   host: "{{ item }}"
  loop:
   - "{{ inventory_hostname }}"
   - '%'

- name: Copy database dump file
  copy:
   src: "{{ db['backupfile']}}"
   dest: /tmp

- name: Restore database
  mysql_db:
   name: "{{ db['database'] }}"
   state: import
   target: "/tmp/{{ db['backupfile'] }}"
   login_password: "{{ db['password']}}"
EOF

[devops@bastion ansible_implementation]$ cat << EOF > roles/db-tier/vars/main.yml
---
# vars file for roles/db-tier
db_pkg:
 - mariadb
 - mariadb-server
 - MySQL-python
 - firewalld
db_srv: mariadb
db:
 user: root
 database: userdb
 password: redhat
 backupfile: userdb.backup
EOF


[devops@bastion ansible_implementation]$ ansible-galaxy init roles/lb-tier
[devops@bastion ansible_implementation]$ cp ~/roles-setup-files/haproxy.j2 roles/lb-tier/templates/
[devops@bastion ansible_implementation]$ cat << EOF > roles/lb-tier/tasks/main.yml
---
# tasks file for roles/lb-tier
- name: Install Firewalld
  yum:
   name: firewalld
   state: latest


- name: Start firewalld service
  service:
   name: firewalld
   state: started
   enabled: true

- name: Install haproxy
  yum:
   name: "{{ item  }}"
   state: latest
  loop:
   - "{{ haproxy_pkg }}"


- name: Start haproxy
  service:
   name: "{{ haproxy_srv }}"
   enabled: true
   state: started


- name: Copy haproxy template
  template:
   src: haproxy.j2
   dest: /etc/haproxy/haproxy.cfg
  notify:
   - restart_haproxy

- name: Open haproxy port
  firewalld:
   service: http
   state: enabled
   immediate: true
   permanent: true

- name: Open haproxy statistics port
  firewalld:
   port: 5000/tcp
   state: enabled
   immediate: true
   permanent: true
EOF


[devops@bastion ansible_implementation]$ cat << EOF > roles/lb-tier/handlers/main.yml
# handlers file for roles/lb-tier
- name: restart_haproxy
  service:
   name: "{{ haproxy_srv }}"
   enabled: true
   state: restarted
EOF

[devops@bastion ansible_implementation]$ cat << EOF > roles/lb-tier/vars/main.yml
---
# vars file for roles/lb-tier
haproxy_pkg:
 - haproxy
 - firewalld
haproxy_srv: haproxy
EOF


[devops@bastion ansible_implementation]$ cat << EOF > webapp-main.yml
- hosts: webservers
  become: yes
  roles:
   - app-tier

- hosts: db
  become: yes
  roles:
   - db-tier

- hosts: lb
  become: yes
  roles:
   - lb-tier
EOF


